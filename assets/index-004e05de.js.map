{"version":3,"mappings":"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","names":["browserLogger","BrowserLog","LogLevel","nullLogger","isBrowser","logger","createRouteHandler","init","location","setLocation","createSignal","window","hash","slice","read","triggerParams","start","useTransition","locationHandler","info","params","addEventListener","onCleanup","removeEventListener","route","match","name","test","loc","decodeURIComponent","split","exec","routeName","getParams","RouterContext","createContext","useRouter","useContext","HttpClient","fetchParams","apiConfig","data","key","value","query","v","rawQuery","queryString","input","formData","property","params1","params2","cancelToken","abortController","secureParams","secure","requestParams","payloadFormatter","type","responseFormat","format","baseUrl","path","body","response","r","e","Api","username","slug","id","API_ROOT","getHeaders","state","WorldApi","RealWorldApi","LIMIT","createArticlesStore","agent","actions","setState","predicate","args","fetchArticles","$req","error","articlesCount","articlesMap","article","articles","articleSource","setArticleSource","createResource","addFavorite","s","removeFavorite","page","err","fetchCurrentUser","loggedIn","setLoggedIn","currentUser","email","password","batch","mutate","newUser","createEffect","token","createTagStore","fetchTags","t","tags","createCommentsStore","articleSlug","setArticleSlug","fetchComments","comments","reload","refetch","comment","c","createProfileStore","setUsername","profile","fetchProfile","createApplicationStore","articlesStore","commentsStore","tagsStore","profileStore","currentUserStore","createStore","createCommonStore","StoreContext","useStore","NavLink","props","scrollTo","_$insert","children","class","_v$2","active","_v$3","href","_v$","_$delegateEvents","NavBar","store","appName","_$Show","when","fallback","image","Home","lazy","feedTab","createMemo","search","tab","feed","getPredicate","handleSetPage","setPage","loadArticles","Article","loadArticle","loadComments","_$createComponent","Show","Profile","loadProfile","userName","createComputed","includes","favoritedBy","author","Editor","__vitePreload","Settings","Auth","App","pullUser","appLoaded","setAppLoaded","_$Suspense","_$Switch","_$Match","_$mergeProps","ContextProvider","router","Provider","AppMain","render","document"],"sources":["../../src/utils/logger/index.ts","../../src/routeContext.tsx","../../src/api/Api.ts","../../src/config.ts","../../src/api/RealWorldApi.ts","../../src/store/createArticlesStore.ts","../../src/store/createUserStore.ts","../../src/store/createCommonStore.ts","../../src/store/createTagStore.ts","../../src/store/createCommentsStore.ts","../../src/store/createProfileStore.ts","../../src/store/storeContext.ts","../../src/components/NavLink.tsx","../../src/components/NavBar.tsx","../../src/pages/Home/index.ts","../../src/pages/Article/index.tsx","../../src/pages/Profile/index.tsx","../../src/pages/Editor/index.ts","../../src/App.tsx","../../src/AppMain.tsx","../../src/index.tsx"],"sourcesContent":["import { LogLevel, BrowserLog } from '@holonix/browser-logger'\r\n\r\nconst browserLogger = () => {\r\n  return new BrowserLog({\r\n    format: '{{index}} {{timestamp}} {{title}} {{message}}{{rhs}}{{file}}:{{line}}',\r\n    dateformat: 'HH:MM:ss',\r\n    level: LogLevel.INFO\r\n  })\r\n}\r\n\r\nconst nullLogger = () => {\r\n  return {\r\n    info: () => {},\r\n    warn: () => {},\r\n    setLevel: () => {},\r\n  }\r\n}\r\n\r\nconst isBrowser = () => {\r\n  return window.name !== \"JSDOM\"\r\n}\r\n\r\nconst logger = isBrowser() ? browserLogger() : nullLogger()\r\n\r\nexport { logger, LogLevel }","import { createContext, useContext, Accessor, Setter } from 'solid-js'\nimport { createSignal, onCleanup, useTransition } from 'solid-js'\n\nimport { logger } from './utils/logger'\n\nexport interface IRouteParams {\n  routeName: string\n  params: string[]\n}\n\n/**\n * @field location accessor\n */\nexport interface IRouteContext {\n  /**\n   * location accessor. A solidJS reactive element, driven by\n   * a window.hashchange event\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event\n   */\n\n  location: Accessor<string>\n\n  setLocation: (route: string) => void\n\n  /**\n   * Return true if regex test is a match in current location\n   *\n   * @param name name to associated with the match\n   * @param test the regex test\n   * @returns true if match\n   */\n\n  match: (name: string, test: RegExp) => boolean\n\n  /**\n   * Returns any params associated with the match\n   */\n\n  getParams: () => IRouteParams | undefined\n}\n\n/**\n * Return IRouteContext that updates when window.location.hash changes\n *\n * @param {string} init\n * @returns\n */\n\nexport function createRouteHandler(init: string): IRouteContext {\n  const [location, setLocation] = createSignal<string>(window.location.hash.slice(2) || init)\n  const [read, triggerParams] = createSignal()\n  const [, start] = useTransition()\n\n  // Remove '#/' from location.hash\n  //\n  // #/?tab=all => ?tab=all\n\n\n  // const locationHandler = () => start(() => setLocation(window.location.hash.slice(2)))\n\n\n  const locationHandler = () => {\n    return start(() => {\n      const location = window.location.hash.slice(2)\n      logger.info('>>>>>>>>>>>>>>>>>> setLocation(%s)', location)\n      setLocation(location)\n    })\n  }\n\n  let params: IRouteParams | undefined = undefined\n\n  window.addEventListener('hashchange', locationHandler)\n\n  onCleanup(() => window.removeEventListener('hashchange', locationHandler))\n\n  return {\n    location,\n\n    setLocation: (route: string) => {\n      window.location.hash = `#/${route}`\n    },\n\n    match: (name: string, test: RegExp) => {\n      const loc = decodeURIComponent(location().split('?')[0])\n      const match = test.exec(loc)\n      if (match) {\n        params = { params: match.slice(1), routeName: name }\n        triggerParams()\n      }\n      return !!match\n    },\n\n    getParams: (): IRouteParams | undefined => {\n      read() // TODO: figure out what this does\n      return params\n    }\n  }\n}\n\nexport const RouterContext = createContext<IRouteContext>()\n\nexport function useRouter() {\n  return useContext<IRouteContext>(RouterContext)\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { logger } from '../utils/logger'\n\nexport interface ILoginUser {\n  email: string\n  /** @format password */\n  password: string\n}\n\nexport interface ILoginUserRequest {\n  user: ILoginUser\n}\n\nexport interface INewUser {\n  username: string\n  email: string\n  /** @format password */\n  password: string\n}\n\nexport interface INewUserRequest {\n  user: INewUser\n}\n\nexport interface IUser {\n  email: string\n  token: string\n  username: string\n  bio: string\n  image: string\n}\n\nexport interface IUserResponse {\n  user: IUser\n}\n\nexport interface IUpdateUser {\n  email?: string\n  token?: string\n  username?: string\n  bio?: string\n  image?: string\n}\n\nexport interface IUpdateUserRequest {\n  user: IUpdateUser\n}\n\nexport interface IProfileResponse {\n  profile: IProfile\n}\n\nexport interface IProfile {\n  username: string\n  bio: string\n  image: string\n  following: boolean\n}\n\nexport interface IArticle {\n  slug: string\n  title: string\n  description: string\n  body: string\n  tagList: string[]\n  /** @format date-time */\n  createdAt: string\n  /** @format date-time */\n  updatedAt: string\n  favorited: boolean\n  favoritesCount: number\n  author: IProfile\n}\n\nexport interface ISingleArticleResponse {\n  article: IArticle\n}\n\nexport interface IMultipleArticlesResponse {\n  articles: IArticle[]\n  articlesCount: number\n}\n\nexport interface INewArticle {\n  title: string\n  description: string\n  body: string\n  tagList?: string[]\n}\n\nexport interface INewArticleRequest {\n  article: INewArticle\n}\n\nexport interface IUpdateArticle {\n  title?: string\n  description?: string\n  body?: string\n}\n\nexport interface IUpdateArticleRequest {\n  article: IUpdateArticle\n}\n\nexport interface IComment {\n  id: number\n  /** @format date-time */\n  createdAt: string\n  /** @format date-time */\n  updatedAt: string\n  body: string\n  author: IProfile\n}\n\nexport interface ISingleCommentResponse {\n  comment: IComment\n}\n\nexport interface IMultipleCommentsResponse {\n  comments: IComment[]\n}\n\nexport interface INewComment {\n  body: string\n}\n\nexport interface INewCommentRequest {\n  comment: INewComment\n}\n\nexport interface ITagsResponse {\n  tags: string[]\n}\n\nexport interface IGenericErrorModel {\n  errors: {\n    body: string[]\n  }\n}\n\nexport type QueryParamsType = Record<string | number, any>\nexport type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>\n\nexport interface FullRequestParams extends Omit<RequestInit, 'body'> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean\n  /** request path */\n  path: string\n  /** content type of request body */\n  type?: ContentType\n  /** query params */\n  query?: QueryParamsType\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat\n  /** request body */\n  body?: unknown\n  /** base url */\n  baseUrl?: string\n  /** request cancellation token */\n  cancelToken?: CancelToken\n}\n\nexport type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string\n  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>\n  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void\n  customFetch?: typeof fetch\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {\n  data: D\n  error: E\n}\n\ntype CancelToken = Symbol | string | number\n\nexport enum ContentType {\n  Json = 'application/json',\n  FormData = 'multipart/form-data',\n  UrlEncoded = 'application/x-www-form-urlencoded',\n  Text = 'text/plain'\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = '/api'\n  private securityData: SecurityDataType | null = null\n  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker']\n  private abortControllers = new Map<CancelToken, AbortController>()\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) => {\n    logger.info('Fetch url=%s', fetchParams[0])\n    return fetch(...fetchParams)\n  }\n\n  private baseApiParams: RequestParams = {\n    credentials: 'same-origin',\n    headers: {},\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer'\n  }\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig)\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data\n  }\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key)\n    return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key])\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key]\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&')\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {}\n    const keys = Object.keys(query).filter(key => 'undefined' !== typeof query[key])\n    return keys.map(key => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key))).join('&')\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery)\n    return queryString ? `?${queryString}` : ''\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) => (input !== null && (typeof input === 'object' || typeof input === 'string') ? JSON.stringify(input) : input),\n    [ContentType.Text]: (input: any) => (input !== null && typeof input !== 'string' ? JSON.stringify(input) : input),\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key]\n        formData.append(key, property instanceof Blob ? property : typeof property === 'object' && property !== null ? JSON.stringify(property) : `${property}`)\n        return formData\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input)\n  }\n\n  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {})\n      }\n    }\n  }\n\n  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken)\n      if (abortController) {\n        return abortController.signal\n      }\n      return void 0\n    }\n\n    const abortController = new AbortController()\n    this.abortControllers.set(cancelToken, abortController)\n    return abortController.signal\n  }\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken)\n\n    if (abortController) {\n      abortController.abort()\n      this.abortControllers.delete(cancelToken)\n    }\n  }\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) && this.securityWorker && (await this.securityWorker(this.securityData))) || {}\n    const requestParams = this.mergeRequestParams(params, secureParams)\n    const queryString = query && this.toQueryString(query)\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json]\n    const responseFormat = format || requestParams.format\n\n    return this.customFetch(`${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`, {\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {})\n      },\n      signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,\n      body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body)\n    }).then(async response => {\n      const r = response as HttpResponse<T, E>\n      r.data = null as unknown as T\n      r.error = null as unknown as E\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then(data => {\n              if (r.ok) {\n                r.data = data\n              } else {\n                r.error = data\n              }\n              return r\n            })\n            .catch(e => {\n              r.error = e\n              return r\n            })\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken)\n      }\n\n      if (!response.ok) throw data\n      return data\n    })\n  }\n}\n\n/**\n * @title Conduit API\n * @version 1.0.0\n * @license MIT License (https://opensource.org/licenses/MIT)\n * @baseUrl /api\n * @contact RealWorld (https://realworld.io)\n *\n * Conduit API\n */\nexport class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  users = {\n    /**\n     * @description Login for existing user\n     *\n     * @tags User and Authentication\n     * @name Login\n     * @summary Existing user login\n     * @request POST:/users/login\n     */\n    login: (data: ILoginUserRequest, params: RequestParams = {}) =>\n      this.request<IUserResponse, void | IGenericErrorModel>({\n        path: `/users/login`,\n        method: 'POST',\n        body: data,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Register a new user\n     *\n     * @tags User and Authentication\n     * @name CreateUser\n     * @summary Register a new user\n     * @request POST:/users\n     */\n    createUser: (data: INewUserRequest, params: RequestParams = {}) =>\n      this.request<IUserResponse, IGenericErrorModel>({\n        path: `/users`,\n        method: 'POST',\n        body: data,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      })\n  }\n  user = {\n    /**\n     * @description Gets the currently logged-in user\n     *\n     * @tags User and Authentication\n     * @name GetCurrentUser\n     * @summary Get current user\n     * @request GET:/user\n     * @secure\n     */\n    getCurrentUser: (params: RequestParams = {}) =>\n      this.request<IUserResponse, void | IGenericErrorModel>({\n        path: `/user`,\n        method: 'GET',\n        secure: true,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Updated user information for current user\n     *\n     * @tags User and Authentication\n     * @name UpdateCurrentUser\n     * @summary Update current user\n     * @request PUT:/user\n     * @secure\n     */\n    updateCurrentUser: (data: IUpdateUserRequest, params: RequestParams = {}) =>\n      this.request<IUserResponse, void | IGenericErrorModel>({\n        path: `/user`,\n        method: 'PUT',\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      })\n  }\n  profiles = {\n    /**\n     * @description Get a profile of a user of the system. Auth is optional\n     *\n     * @tags Profile\n     * @name GetProfileByUsername\n     * @summary Get a profile\n     * @request GET:/profiles/{username}\n     */\n    getProfileByUsername: (username: string, params: RequestParams = {}) =>\n      this.request<IProfileResponse, void | IGenericErrorModel>({\n        path: `/profiles/${username}`,\n        method: 'GET',\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Follow a user by username\n     *\n     * @tags Profile\n     * @name FollowUserByUsername\n     * @summary Follow a user\n     * @request POST:/profiles/{username}/follow\n     * @secure\n     */\n    followUserByUsername: (username: string, params: RequestParams = {}) =>\n      this.request<IProfileResponse, void | IGenericErrorModel>({\n        path: `/profiles/${username}/follow`,\n        method: 'POST',\n        secure: true,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Unfollow a user by username\n     *\n     * @tags Profile\n     * @name UnfollowUserByUsername\n     * @summary Unfollow a user\n     * @request DELETE:/profiles/{username}/follow\n     * @secure\n     */\n    unfollowUserByUsername: (username: string, params: RequestParams = {}) =>\n      this.request<IProfileResponse, void | IGenericErrorModel>({\n        path: `/profiles/${username}/follow`,\n        method: 'DELETE',\n        secure: true,\n        format: 'json',\n        ...params\n      })\n  }\n  articles = {\n    /**\n     * @description Get most recent articles from users you follow. Use query parameters to limit. Auth is required\n     *\n     * @tags Articles\n     * @name GetArticlesFeed\n     * @summary Get recent articles from users you follow\n     * @request GET:/articles/feed\n     * @secure\n     */\n    getArticlesFeed: (\n      query?: {\n        /**\n         * Limit number of articles returned (default is 20)\n         * @default 20\n         */\n        limit?: number\n        /**\n         * Offset/skip number of articles (default is 0)\n         * @default 0\n         */\n        offset?: number\n      },\n      params: RequestParams = {}\n    ) =>\n      this.request<IMultipleArticlesResponse, void | IGenericErrorModel>({\n        path: `/articles/feed`,\n        method: 'GET',\n        query: query,\n        secure: true,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Get most recent articles globally. Use query parameters to filter results. Auth is optional\n     *\n     * @tags Articles\n     * @name GetArticles\n     * @summary Get recent articles globally\n     * @request GET:/articles\n     */\n    getArticles: (\n      query?: {\n        /** Filter by tag */\n        tag?: string\n        /** Filter by author (username) */\n        author?: string\n        /** Filter by favorites of a user (username) */\n        favorited?: string\n        /**\n         * Limit number of articles returned (default is 20)\n         * @default 20\n         */\n        limit?: number\n        /**\n         * Offset/skip number of articles (default is 0)\n         * @default 0\n         */\n        offset?: number\n      },\n      params: RequestParams = {}\n    ) =>\n      this.request<IMultipleArticlesResponse, void | IGenericErrorModel>({\n        path: `/articles`,\n        method: 'GET',\n        query: query,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Create an article. Auth is required\n     *\n     * @tags Articles\n     * @name CreateArticle\n     * @summary Create an article\n     * @request POST:/articles\n     * @secure\n     */\n    createArticle: (data: INewArticleRequest, params: RequestParams = {}) =>\n      this.request<ISingleArticleResponse, void | IGenericErrorModel>({\n        path: `/articles`,\n        method: 'POST',\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Get an article. Auth not required\n     *\n     * @tags Articles\n     * @name GetArticle\n     * @summary Get an article\n     * @request GET:/articles/{slug}\n     */\n    getArticle: (slug: string, params: RequestParams = {}) =>\n      this.request<ISingleArticleResponse, IGenericErrorModel>({\n        path: `/articles/${slug}`,\n        method: 'GET',\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Update an article. Auth is required\n     *\n     * @tags Articles\n     * @name UpdateArticle\n     * @summary Update an article\n     * @request PUT:/articles/{slug}\n     * @secure\n     */\n    updateArticle: (slug: string, data: IUpdateArticleRequest, params: RequestParams = {}) =>\n      this.request<ISingleArticleResponse, void | IGenericErrorModel>({\n        path: `/articles/${slug}`,\n        method: 'PUT',\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Delete an article. Auth is required\n     *\n     * @tags Articles\n     * @name DeleteArticle\n     * @summary Delete an article\n     * @request DELETE:/articles/{slug}\n     * @secure\n     */\n    deleteArticle: (slug: string, params: RequestParams = {}) =>\n      this.request<void, void | IGenericErrorModel>({\n        path: `/articles/${slug}`,\n        method: 'DELETE',\n        secure: true,\n        ...params\n      }),\n\n    /**\n     * @description Get the comments for an article. Auth is optional\n     *\n     * @tags Comments\n     * @name GetArticleComments\n     * @summary Get comments for an article\n     * @request GET:/articles/{slug}/comments\n     */\n    getArticleComments: (slug: string, params: RequestParams = {}) =>\n      this.request<IMultipleCommentsResponse, void | IGenericErrorModel>({\n        path: `/articles/${slug}/comments`,\n        method: 'GET',\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Create a comment for an article. Auth is required\n     *\n     * @tags Comments\n     * @name CreateArticleComment\n     * @summary Create a comment for an article\n     * @request POST:/articles/{slug}/comments\n     * @secure\n     */\n    createArticleComment: (slug: string, data: INewCommentRequest, params: RequestParams = {}) =>\n      this.request<ISingleCommentResponse, void | IGenericErrorModel>({\n        path: `/articles/${slug}/comments`,\n        method: 'POST',\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Delete a comment for an article. Auth is required\n     *\n     * @tags Comments\n     * @name DeleteArticleComment\n     * @summary Delete a comment for an article\n     * @request DELETE:/articles/{slug}/comments/{id}\n     * @secure\n     */\n    deleteArticleComment: (slug: string, id: number, params: RequestParams = {}) =>\n      this.request<void, void | IGenericErrorModel>({\n        path: `/articles/${slug}/comments/${id}`,\n        method: 'DELETE',\n        secure: true,\n        ...params\n      }),\n\n    /**\n     * @description Favorite an article. Auth is required\n     *\n     * @tags Favorites\n     * @name CreateArticleFavorite\n     * @summary Favorite an article\n     * @request POST:/articles/{slug}/favorite\n     * @secure\n     */\n    createArticleFavorite: (slug: string, params: RequestParams = {}) =>\n      this.request<ISingleArticleResponse, void | IGenericErrorModel>({\n        path: `/articles/${slug}/favorite`,\n        method: 'POST',\n        secure: true,\n        format: 'json',\n        ...params\n      }),\n\n    /**\n     * @description Unfavorite an article. Auth is required\n     *\n     * @tags Favorites\n     * @name DeleteArticleFavorite\n     * @summary Unfavorite an article\n     * @request DELETE:/articles/{slug}/favorite\n     * @secure\n     */\n    deleteArticleFavorite: (slug: string, params: RequestParams = {}) =>\n      this.request<ISingleArticleResponse, void | IGenericErrorModel>({\n        path: `/articles/${slug}/favorite`,\n        method: 'DELETE',\n        secure: true,\n        format: 'json',\n        ...params\n      })\n  }\n  tags = {\n    /**\n     * @description Get tags. Auth not required\n     *\n     * @name TagsList\n     * @summary Get tags\n     * @request GET:/tags\n     */\n    tagsList: (params: RequestParams = {}) =>\n      this.request<ITagsResponse, IGenericErrorModel>({\n        path: `/tags`,\n        method: 'GET',\n        format: 'json',\n        ...params\n      })\n  }\n}","\nexport const API_ROOT = 'https://api.realworld.io/api'","import { Api as RealWorldApi } from './Api'\nimport { IStoreState } from '../store/storeState'\n\nimport { API_ROOT } from '../config'\n\nimport type {\n  HttpResponse,\n  IArticle,\n  IComment,\n  IGenericErrorModel,\n  INewArticle,\n  INewUser,\n  IProfile,\n  ITagsResponse,\n  IUser,\n  IUserResponse,\n} from './Api';\n\nconst getHeaders = (state: IStoreState) => {\n  if (state.token) {\n    return {\n      Authorization: `Token ${state.token}`\n    }\n  }\n  return {}\n}\n\nexport class WorldApi extends RealWorldApi<unknown> {\n\n  /**\n   * Extend the swagger-typescript-api generated API to\n   * provide a common access point for the API and the\n   * associated API data types\n   */\n\n  constructor(state: IStoreState) {\n    super({\n      baseUrl: API_ROOT,\n      baseApiParams: {\n        headers: getHeaders(state)\n      }\n    })\n  }\n}\n\nexport { HttpResponse, IGenericErrorModel }\nexport { IArticle, IComment, INewArticle, INewUser, IProfile, ITagsResponse, IUser, IUserResponse }\n","import { createResource, createSignal, InitializedResource } from 'solid-js'\nimport { SetStoreFunction } from 'solid-js/store'\nimport { WorldApi, IArticle, INewArticle } from '../api/RealWorldApi'\nimport { IStoreState, IArticleMap } from './storeState'\n\nimport { logger } from '../utils/logger'\n\nconst LIMIT = 10\n\nexport type ITag = 'feed' | 'all'\nexport interface IPredicate {\n  feed?: boolean\n  tag?: ITag\n  favoritedBy?: string\n  author?: string\n}\n\nexport interface IArticleActions {\n  makeFavorite(slug: string): void\n  unmakeFavorite(slug: string): void\n\n  createArticle(newArticle: INewArticle): Promise<IArticle>\n  updateArticle(data: IArticle): Promise<IArticle>\n  deleteArticle(slug: string): Promise<void>\n\n  loadArticle(slug: string): void\n  loadArticles(predicate: IPredicate): void\n\n  setPage: (page: number) => void\n}\n\n/**\n * Create interface to the articles API endpoint. We populate the supplied\n * actions object with methods that wrap the low-level\n * server API\n *\n * @param agent\n * @param actions\n * @param state\n * @param setState\n * @returns InitializedResource<IArticleMap>\n */\n\nexport function createArticlesStore(agent: WorldApi, actions: IArticleActions, state: IStoreState, setState: SetStoreFunction<IStoreState>): InitializedResource<IArticleMap> {\n\n  const $req = async (predicate: IPredicate) => {\n    const args = { offset: state.page * LIMIT, limit: LIMIT }\n\n    if (predicate.myFeed) {\n      logger.info('getArticlesFeed args=%s', JSON.stringify(args))\n\n      // https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints/#feed-articles\n\n      return await agent.articles.getArticlesFeed(args)\n    }\n\n    if (predicate.favoritedBy) args.favorited = predicate.favoritedBy\n    if (predicate.tag) args.tag = predicate.tag\n    if (predicate.author) args.author = predicate.author\n\n    // https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints/#list-articles\n\n    logger.info('getArticles args=%s', JSON.stringify(args))\n    return await agent.articles.getArticles(args)\n  }\n\n  /**\n   * Getter for the article store. Fetch the requested article(s) from the server. When\n   * fetching single articles we first check to see if the the article is already in the\n   * store. If so we just return the existing store values\n   *\n   * @param args [string, IPredicate | string] Get articles based on the slug or the predicate\n   * @param value IArticleMap The exiting store values\n   *\n   * @returns IArticleMap The updated store values or the existing store if nothing is fetched\n   */\n\n  const fetchArticles = async (args: [string, IPredicate | string], { value }: IArticleMap): IArticleMap => {\n\n    if (args[0] === 'articles') {\n      const { data, error } = await $req(args[1])\n\n      logger.info('Done')\n\n      if (error) throw error\n\n      const { articles, articlesCount } = data\n\n      queueMicrotask(() => {\n        setState({ totalPagesCount: Math.ceil(articlesCount / LIMIT) })\n      })\n\n      // Convert received array of articles to a map keyed on the slug\n\n      const articlesMap: { [slug: string]: IArticle } = {}\n      for (const article of articles) {\n        articlesMap[article.slug] = article\n      }\n      return articlesMap\n    }\n\n    // Retrieve a single article, test if we already have it\n\n    const slug: string = args[1]\n    if (slug in state.articles) {\n      return value\n    }\n\n    // Get the article from the server\n\n    const { data, error } = await agent.articles.getArticle(slug)\n    if (error) throw error\n\n    return { ...value, [slug]: data.article }\n  }\n\n  // Calls to setArticleSource() trigger the createResource getter which\n  // in-turn calls fetchArticles\n\n  const [articleSource, setArticleSource] = createSignal<[string, IPredicate | string]>()\n  const [articles] = createResource<IArticleMap>(articleSource, fetchArticles, { initialValue: {} })\n\n  const addFavorite = (slug: string) => {\n    setState('articles', slug, s => ({ favorited: true, favoritesCount: s.favoritesCount + 1 }))\n  }\n\n  const removeFavorite = (slug: string) => {\n    setState('articles', slug, s => ({ favorited: false, favoritesCount: s.favoritesCount - 1 }))\n  }\n\n  // Add our actions the provided actions container\n\n  Object.assign(actions, {\n\n    setPage: (page: number) => {\n      logger.info('setPage(%d)', page)\n      setState({ page })\n    },\n\n    loadArticles(predicate: IPredicate) {\n      setArticleSource(['articles', predicate])\n    },\n\n    loadArticle(slug: string) {\n      setArticleSource(['article', slug])\n    },\n\n    async makeFavorite(slug: string) {\n      const article = state.articles[slug]\n      if (article && !article.favorited) {\n        addFavorite(slug)\n        const { data, error } = await agent.articles.createArticleFavorite(slug)\n        if (error) {\n          removeFavorite(slug)\n          throw error\n        }\n      }\n    },\n\n    async unmakeFavorite(slug: string) {\n      const article = state.articles[slug]\n      if (article && article.favorited) {\n        removeFavorite(slug)\n        const { data, error } = await agent.articles.deleteArticleFavorite(slug)\n        if (error) {\n          addFavorite(slug)\n          throw err\n        }\n      }\n    },\n\n    async createArticle(article: INewArticle): Promise<IArticle> {\n      const { data, error } = await agent.articles.createArticle({ article })\n      if (error) throw error\n      setState('articles', { [data.article.slug]: data.article })\n      return data.article\n    },\n\n    async updateArticle(article: IArticle): IArticle {\n      const { data } = await agent.articles.updateArticle(article.slug, { article })\n      setState('articles', { [data.article.slug]: data.article })\n      return data.article\n    },\n\n    async deleteArticle(slug: string) {\n      const article = state.articles[slug]\n      setState('articles', { [slug]: undefined })\n      try {\n        await agent.articles.deleteArticle(slug)\n      } catch (err) {\n        setState('articles', { [slug]: article })\n        throw err\n      }\n    }\n\n  })\n\n  return articles\n}\n","import { createSignal, createResource, batch, Resource } from 'solid-js'\nimport { SetStoreFunction } from 'solid-js/store'\nimport { WorldApi, INewUser, IUser } from '../api/RealWorldApi'\nimport { ICommonActions } from './createCommonStore'\nimport { IStoreState } from './storeState'\n\nexport interface IUserActions {\n\n  /**\n   * Update store.currentUser state from the server\n   * @returns\n   */\n\n  pullUser: () => true\n\n  login(email: string, password: string): Promise<void>\n\n  register(username: string, email: string, password: string): Promise<void>\n\n  logout(): void\n\n  updateUser(newUser: IUser): Promise<void>\n}\n\n/**\n * Create interface to the user API endpoint. We populate the supplied\n * actions object with methods that wrap the low-level\n * server API\n *\n * @param agent Used for communication with the sever API\n * @param actions The actions object to be populated\n * @param state\n * @param setState\n * @returns\n */\n\nexport function createUserStore(agent: WorldApi, actions: IUserActions & ICommonActions, setState: SetStoreFunction<IStoreState>): Resource<IUser> {\n\n  /**\n   * Get the current user details from the server\n   */\n\n  const fetchCurrentUser = async (): IUser => {\n    const { data, error } = await agent.user.getCurrentUser()\n    return data.user\n  }\n\n  const [loggedIn, setLoggedIn] = createSignal(false)\n  const [currentUser, { mutate }] = createResource<IUser>(loggedIn, fetchCurrentUser)\n\n  // Add our actions the provided actions container\n\n  Object.assign(actions, {\n\n    pullUser: () => setLoggedIn(true),\n\n    async login(email: string, password: string) {\n      const { data, error } = await agent.users.login({ user: { email, password } })\n      if (error) throw error\n      actions.setToken(data.user.token)\n      setLoggedIn(true)\n    },\n\n    async register(username: string, email: string, password: string) {\n      const { data, error } = await agent.users.createUser({ user: { username, email, password } })\n      if (error) throw error\n      actions.setToken(data.user.token)\n      setLoggedIn(true)\n    },\n\n    logout() {\n      batch(() => {\n        actions.setToken(undefined)\n        mutate(undefined)\n      })\n    },\n\n    async updateUser(newUser: INewUser) {\n      const { data, error } = await agent.user.updateCurrentUser({ user: newUser })\n      if (error) throw errors\n      mutate(data.user)\n    }\n\n  })\n\n  return currentUser\n}\n","import { createEffect } from 'solid-js'\nimport { SetStoreFunction } from 'solid-js/store'\nimport { IStoreState } from './storeState'\n\nimport { logger } from '../utils/logger'\nexport interface ICommonActions {\n  setToken: (token: string | undefined) => void\n}\n\n/**\n *\n * @param agent\n * @param actions\n * @param state\n * @param setState\n * @returns\n */\n\nexport function createCommonStore(actions: ICommonActions, state: IStoreState, setState: SetStoreFunction<IStoreState>): void {\n\n  // Triggered by change in the store.token state. Save the new\n  // token state to the local store.\n\n  createEffect(() => {\n    if (state.token) {\n      logger.warn('Add token [%s ...]', state.token.slice(0, 15))\n      localStorage.setItem('jwt', state.token)\n    } else {\n      logger.warn('Remove token')\n      localStorage.removeItem('jwt')\n    }\n  })\n\n  // login/logout actions call setToken() which updates the\n  // token state in the store. This, in turn, triggers\n  // the above createEffect()\n\n  actions.setToken = (token: string | undefined) => {\n    logger.info('setToken tok=%s', token)\n    setState({ token })\n  }\n\n}\n","import { createResource, InitializedResourceReturn } from 'solid-js'\nimport { WorldApi } from '../api/RealWorldApi'\n\nimport { logger } from '../utils/logger'\n\n/**\n * Create interface to the tags API endpoint.\n *\n * @param agent\n * @param actions\n * @param state\n * @param setState\n * @returns\n */\n\nexport function createTagStore(agent: WorldApi): InitializedResourceReturn<string[]> {\n\n  const fetchTags = async (): string[] => {\n    logger.info('getTags')\n    const { data, error } = await agent.tags.tagsList()\n    return data.tags.map(t => t.toLowerCase())\n  }\n\n  const [tags] = createResource<string[]>({ initialValue: [] }, fetchTags)\n\n  return tags\n}\n","import { createResource, createSignal, InitializedResource } from 'solid-js'\nimport { SetStoreFunction } from 'solid-js/store'\nimport { WorldApi, IComment } from '../api/RealWorldApi'\nimport { IStoreState } from './storeState'\n\nimport { logger } from '../utils/logger'\n\nexport interface ICommentsActions {\n  loadComments(articleSlug: string, reload: boolean): void\n  createComment(comment: string): Promise<IComment>\n  deleteComment(id: string)\n}\n\n/**\n * Create interface to the comments API endpoint. We populate the supplied\n * actions object with methods that wrap the low-level\n * server API\n *\n * @param agent Used for communication with the sever API\n * @param actions The actions object to be populated\n * @param state\n * @param setState\n * @returns InitializedResource<IComment[]>\n */\n\nexport function createCommentsStore(agent: WorldApi, actions: ICommentsActions, state: IStoreState, setState: SetStoreFunction<IStoreState>): InitializedResource<IComment[]> {\n  const [articleSlug, setArticleSlug] = createSignal<string>()\n\n  const fetchComments = async (): IComment[] => {\n    const slug = articleSlug()\n    logger.info('getArticleComments articleSlug = %s ...', slug ? slug.slice(0, 15) : 'undefined')\n    const { data, error } = await agent.articles.getArticleComments(slug)\n    return data.comments\n  }\n\n  const [comments, { mutate, refetch }] = createResource<IComment[]>(articleSlug, fetchComments, { initialValue: [] })\n\n  // Add our actions the provided actions container\n\n  Object.assign(actions, {\n\n    loadComments(articleSlug: string, reload: boolean) {\n      if (reload) return refetch()\n      logger.info('loadComments articleSlug=%s ...', articleSlug.slice(0, 15))\n      setArticleSlug(articleSlug)\n      setState({ articleSlug })\n    },\n\n    async createComment(comment: string) {\n      await agent.articles.createArticleComment(state.articleSlug, { comment })\n    },\n\n    async deleteComment(id: string) {\n      mutate(comments().filter(c => c.id !== id))\n      try {\n        await agent.articles.deleteArticleComment(state.articleSlug, id)\n      } catch (err) {\n        actions.loadComments(state.articleSlug)\n        throw err\n      }\n    }\n  })\n\n  return comments\n}\n","import { createSignal, createResource, InitializedResource } from 'solid-js'\nimport { SetStoreFunction } from 'solid-js/store'\nimport { WorldApi, IProfile } from '../api/RealWorldApi'\nimport { IStoreState } from './storeState'\n\nexport interface IProfileActions {\n  loadProfile(name: string): void\n  follow(): Promise<void>\n  unfollow(): Promise<void>\n}\n\n/**\n * Create interface to the profile API endpoint. We populate the supplied\n * actions object with methods that wrap the low-level\n * server API\n *\n * @param agent Used for communication with the sever API\n * @param actions The actions object to be populated\n * @param state\n * @param setState\n * @returns\n */\n\nexport function createProfileStore(agent: WorldApi, actions: IProfileActions, state: IStoreState, setState: SetStoreFunction<IStoreState>): InitializedResource<IProfile> {\n\n  const fetchProfile = async (username: string) => {\n    const { data, error } = await agent.profiles.getProfileByUsername(username)\n    return data.profile\n  }\n\n  const [username, setUsername] = createSignal<string>()\n  const [profile] = createResource<IProfile>(username, fetchProfile)\n\n  // Add our actions the provided actions container\n\n  Object.assign(actions, {\n\n    loadProfile(name: string) {\n      setUsername(name)\n    },\n\n    async follow() {\n      if (state.profile && !state.profile.following) {\n        setState('profile', 'following', true)\n        try {\n          await agent.profiles.followUserByUsername(state.profile.username)\n        } catch (err) {\n          setState('profile', 'following', false)\n        }\n      }\n    },\n\n    async unfollow() {\n      if (state.profile && state.profile.following) {\n        setState('profile', 'following', false)\n        try {\n          await agent.profiles.unfollowUserByUsername(state.profile.username)\n        } catch (err) {\n          setState('profile', 'following', true)\n        }\n      }\n    }\n\n  })\n\n  return profile\n}\n","import { createContext, useContext, InitializedResource } from 'solid-js';\nimport { createStore } from 'solid-js/store'\n\nimport { IComment, IProfile, IUser } from '../api/RealWorldApi';\nimport { WorldApi } from '../api/RealWorldApi'\n\nimport { createArticlesStore, IArticleActions } from './createArticlesStore'\nimport { createUserStore, IUserActions } from './createUserStore'\nimport { createCommonStore, ICommonActions } from './createCommonStore'\nimport { createTagStore } from './createTagStore'\nimport { createCommentsStore, ICommentsActions } from './createCommentsStore'\nimport { createProfileStore, IProfileActions } from './createProfileStore'\n\nimport { IStoreState, IArticleMap } from './storeState'\n\nexport interface IActions extends IUserActions, IArticleActions, ICommentsActions, IProfileActions, ICommonActions {}\n\nexport type IStoreContext = [state: IStoreState, actions: IActions]\n\n/**\n * Create the application store. This is made available to\n * the application\n *\n * @returns {IStoreContext} The application store\n */\n\nexport function createApplicationStore(): IStoreContext {\n\n  let articlesStore: InitializedResource<IArticleMap> = undefined\n  let commentsStore: InitializedResource<IComment[]> = undefined\n  let tagsStore: InitializedResource<string[]> = undefined\n  let profileStore: InitializedResource<IProfile> = undefined\n  let currentUserStore: InitializedResource<IUser> = undefined\n\n  const [state, setState] = createStore<IStoreState>({\n\n    // The following getters map each of\n    // the resource stores onto the global store\n\n    get articles(): IArticleMap {\n      return articlesStore()\n    },\n\n    get comments(): Comment[] {\n      return commentsStore()\n    },\n\n    get tags(): string[] {\n      return tagsStore()\n    },\n\n    get profile(): IProfile {\n      return profileStore()\n    },\n\n    get currentUser(): IUser {\n      return currentUserStore()\n    },\n\n    // Additional bits & bobs\n\n    page: 0,\n    articleSlug: undefined,\n    totalPagesCount: 0,\n    token: localStorage.getItem('jwt'),\n    appName: 'conduit'\n  })\n\n  // Container for ALL the store's actions\n\n  const actions = {}\n\n  // Agent used for communication with the server\n\n  const agent = new WorldApi(state)\n\n  // Instantiate all the resource stores. Each of these functions\n  // returns an instance of a solidJS resource state that is updated\n  // by machinery embedded in the function that accesses the associated server API\n  //\n  // The functions also populate the actions container with utility\n  // methods that manage the resource\n\n  articlesStore = createArticlesStore(agent, actions, state, setState)\n  commentsStore = createCommentsStore(agent, actions, state, setState)\n  tagsStore = createTagStore(agent)\n  profileStore = createProfileStore(agent, actions, state, setState)\n  currentUserStore = createUserStore(agent, actions, setState)\n\n  createCommonStore(actions, state, setState)\n\n  // Return the fully initialised store\n\n  return [state, actions]\n}\n\nexport const StoreContext = createContext<IStoreContext>()\n\n/**\n * Globally accessible application store and associated utility\n * functions\n * ```\n *\n * Example:\n *\n *    const [store, { setPage, loadArticles, unfollow, follow }] = useStore()\n *\n *    const article = store.articles[slug]\n *    const comment = store.comments[45]\n *\n *    setPage(page.page + 1)\n *\n *\n * ```\n * @returns IStoreContext - The global application context\n */\n\nexport function useStore(): IStoreContext {\n  return useContext<IStoreContext>(StoreContext)\n}\n","import { useRouter } from '../routeContext'\n\ninterface NavLinkProps {\n  class: string\n  active: boolean\n  href: string\n  route: string\n}\n\nexport const NavLink = (props: NavLinkProps) => {\n  const { getParams } = useRouter()\n  return (\n    <a\n      class={props.class}\n      classList={{ active: props.active || getParams()?.routeName === props.route }}\n      href={`#/${props.href || props.route}`}\n      onClick={() => window.scrollTo(0, 0)}\n    >\n      {props.children}\n    </a>\n  )\n}\n","import { useStore } from '../store/storeContext'\nimport { NavLink } from './NavLink'\n\nexport default () => {\n  const [store] = useStore()\n\n  return (\n    <nav class=\"navbar navbar-light\">\n      <div class=\"container\">\n        <NavLink class=\"navbar-brand\" route=\"\">\n          {store.appName}\n        </NavLink>\n        <ul class=\"nav navbar-nav pull-xs-right\">\n          <li class=\"nav-item\">\n            <NavLink class=\"nav-link\" route=\"\">\n              Home\n            </NavLink>\n          </li>\n          <Show\n            when={store.currentUser}\n            fallback={\n              <>\n                <li class=\"nav-item\">\n                  <NavLink class=\"nav-link\" route=\"login\">\n                    Sign in\n                  </NavLink>\n                </li>\n                <li class=\"nav-item\">\n                  <NavLink class=\"nav-link\" route=\"register\">\n                    Sign up\n                  </NavLink>\n                </li>\n              </>\n            }\n          >\n            <li class=\"nav-item\">\n              <NavLink class=\"nav-link\" route=\"editor\">\n                <i class=\"ion-compose\" /> New Post\n              </NavLink>\n            </li>\n            <li class=\"nav-item\">\n              <NavLink class=\"nav-link\" route=\"settings\">\n                <i class=\"ion-gear-a\" /> Settings\n              </NavLink>\n            </li>\n            <li class=\"nav-item\">\n              <NavLink class=\"nav-link\" route=\"profile\" href={`@${store.currentUser.username}`}>\n                <img src={store.currentUser.image} class=\"user-pic\" />\n                {store.currentUser.username}\n              </NavLink>\n            </li>\n          </Show>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n","import { createComputed, createMemo, useTransition, lazy } from 'solid-js'\nimport { useRouter } from '../../routeContext'\nimport { useStore } from '../../store/storeContext'\nimport { IPredicate } from '../../store/createArticlesStore'\n\nimport { logger } from '../../utils/logger'\n\nconst Home = lazy(() => import('./Home'))\n\nexport default function () {\n  const [state, { loadArticles, setPage }] = useStore()\n  const { token, appName } = state\n  const { location } = useRouter()\n\n  // The feedTab, this is driven by the page URL. If\n  // none is specified we default to the personal ('feed') if\n  // a user is signed in or the global feed ('all') if\n  // operating anonymously\n\n  const feedTab = createMemo<string>(() => {\n    let feed = token ? 'feed' : 'all'\n    const search = location().split('?')[1]\n    if (search) {\n      const query = new URLSearchParams(search)\n      const tab = query.get('tab')\n      if (tab) feed = tab\n    }\n\n    // Go to start of newly selected feed\n\n    setPage(0)\n\n    logger.info('feedTab changed to [%s]', feed)\n    return feed\n  })\n\n  logger.info('tab %s', feedTab())\n\n  const [, start] = useTransition()\n\n  // Convert the selected feed tab into a predicate that\n  // is used to load the correct articles feed\n\n  const getPredicate = (): IPredicate => {\n    switch (feedTab()) {\n      case 'feed':\n        return { myFeed: true }\n      case 'all':\n        return {}\n      case undefined:\n        return undefined\n      default:\n        return { tag: feedTab() }\n    }\n  }\n\n  // Linked to paginator in ArticleList.tsx\n\n  const handleSetPage = (page: number) => {\n    const promise = start(() => {\n      setPage(page)\n      loadArticles(getPredicate())\n    })\n  }\n\n  createComputed(() => loadArticles(getPredicate()))\n\n  return Home({ handleSetPage, appName, tab: feedTab, state })\n}\n","import { lazy } from 'solid-js'\nimport { Show } from 'solid-js'\nimport { useStore } from '../../store/storeContext'\nimport { IRouteParams } from '../../routeContext'\n\nimport { logger } from '../../utils/logger'\n\nconst Article = lazy(() => import('./Article'))\n\nexport default function (props: IRouteParams) {\n  const [store, { loadArticle, loadComments }] = useStore()\n  const slug = props.params[0]\n\n  logger.info('************** page=Article] ******************')\n\n  if (!(slug in store.articles)) {\n    loadArticle(slug)\n  }\n\n  loadComments(slug)\n\n  return (\n    <Show when={store.articles[slug]}>\n      <Article slug={slug} />\n    </Show>\n  )\n}\n","import { createComputed, lazy } from 'solid-js'\nimport { useRouter, IRouteParams } from '../../routeContext'\nimport { useStore } from '../../store/storeContext'\n\nconst Profile = lazy(() => import('./Profile'))\n\nexport default function (props: IRouteParams) {\n  const [, { loadProfile, loadArticles }] = useStore()\n  const { location } = useRouter()\n\n  const userName = props.params[0]\n\n  createComputed(() => props.routeName === 'profile' && loadProfile(userName))\n\n  // Determine which article feed to display. The user/authors feed ('My Articles' tab) or\n  // the user/favorites ('Favorited Articles' tab)\n\n  createComputed(() => {\n    if (props.routeName === 'profile' && (location().includes('/favorites'))) {\n      loadArticles({ favoritedBy: userName })\n    }\n    else {\n      loadArticles({ author: userName })\n    }\n  })\n\n  return <Profile username={props.params[0]} />\n}\n","import { lazy } from 'solid-js'\nimport { useStore } from '../../store/storeContext'\nimport { IRouteParams } from '../../routeContext'\n\nimport { logger } from '../../utils/logger'\n\nconst Editor = lazy(() => import('./Editor'))\n\nexport default function (props: IRouteParams) {\n  const [store, { loadArticle }] = useStore()\n\n  const slug = props.params[0]\n\n  logger.info('***** Editor[slug=%s] **********', slug)\n\n  slug && loadArticle(slug)\n\n  return Editor({ slug })\n\n}\n","import { lazy, createSignal, createComputed } from 'solid-js'\n\nimport { useRouter } from './routeContext'\nimport { useStore } from './store/storeContext'\n\nimport NavBar from './components/NavBar'\nimport Home from './pages/Home'\nimport Article from './pages/Article'\nimport Profile from './pages/Profile'\nimport Editor from './pages/Editor'\n\nimport { logger } from './utils/logger'\n\nconst Settings = lazy(() => import('./pages/Settings'))\nconst Auth = lazy(() => import('./pages/Auth'))\n\n// logger.info = function() {}\n\nexport const App = () => {\n  const [store, { pullUser }] = useStore()\n  const [appLoaded, setAppLoaded] = createSignal(false)\n  const { match, getParams } = useRouter()\n\n  logger.info('Starting %s', 99)\n\n  if (!store.token) setAppLoaded(true)\n  else {\n    pullUser()\n    createComputed(() => store.currentUser && setAppLoaded(true))\n  }\n\n  return (\n    <div data-testid=\"container\">\n      <NavBar />\n      <Show when={appLoaded()} fallback={<div class=\"container loader\"></div>}>\n        <Suspense>\n          <Switch>\n            <Match when={match('editor', /^editor\\/?(.*)/)}>\n              <Editor {...getParams()} />\n            </Match>\n            <Match when={match('settings', /^settings/)}>\n              <Settings />\n            </Match>\n            <Match when={match('login', /^login/)}>\n              <Auth />\n            </Match>\n            <Match when={match('register', /^register/)}>\n              <Auth />\n            </Match>\n            <Match when={match('article', /^article\\/(.*)/)}>\n              <Article {...getParams()} />\n            </Match>\n            <Match when={match('profile', /^@([^/]*)\\/?(favorites)?/)}>\n              <Profile {...getParams()} />\n            </Match>\n            <Match when={match('', /^#?$/)}>\n              <Home />\n            </Match>\n          </Switch>\n        </Suspense>\n      </Show>\n    </div>\n  )\n}\n","import { App } from './App'\nimport { RouterContext, createRouteHandler } from './routeContext'\nimport { StoreContext, createApplicationStore } from './store/storeContext'\n\ninterface IProps {\n  children?: Element\n}\n\nfunction ContextProvider(props: IProps) {\n  const router = createRouteHandler('')\n  const store = createApplicationStore()\n\n  return (\n    <RouterContext.Provider value={router}>\n      <StoreContext.Provider value={store}>{props.children}</StoreContext.Provider>\n    </RouterContext.Provider>\n  )\n}\n\nexport const AppMain = () => (\n  <ContextProvider>\n    <App />\n  </ContextProvider>\n)\n\n","import { render } from 'solid-js/web'\nimport { AppMain } from './AppMain'\n\nrender(() => AppMain(), document.body)\n"],"file":"assets/index-004e05de.js"}